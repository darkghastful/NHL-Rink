if(suppressWarnings(is.na(object))){
object <- content.from.endpoint("https://api.nhle.com/stats/rest/en/team")$data
object <- rename.column(object, "id", "teamId")
object <- rename.column(object, "fullName", "teamName")
}
if(length(str_split(team, " ")[[1]])>1){
row <- object[,"teamName"]==team
}else if(!grepl("[^0-9]", as.character(team))){
row <- object[,"teamId"]==as.numeric(team)
}else{
row <- object[,"triCode"]==team
}
team <- object[row, c("teamName", "teamId", "triCode")]
if(length(team)>1){
team <- team[length(team)]
}
return(as.list(team))
}
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
is.na(team.logos)
teamName.teamId.triCode <- function(team, object=NA){
if(all(is.na(object))){
object <- content.from.endpoint("https://api.nhle.com/stats/rest/en/team")$data
object <- rename.column(object, "id", "teamId")
object <- rename.column(object, "fullName", "teamName")
}
if(length(str_split(team, " ")[[1]])>1){
row <- object[,"teamName"]==team
}else if(!grepl("[^0-9]", as.character(team))){
row <- object[,"teamId"]==as.numeric(team)
}else{
row <- object[,"triCode"]==team
}
team <- object[row, c("teamName", "teamId", "triCode")]
if(length(team)>1){
team <- team[length(team)]
}
return(as.list(team))
}
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
as.raster(logo)
rg <- rasterGrob(
raster,
width       = unit(1, "npc"),
height      = unit(1, "npc"),
interpolate = TRUE,
gp          = gpar(alpha = 0.5)
)
rg <- rasterGrob(
raster,
width       = unit(1, "npc"),
height      = unit(1, "npc"),
interpolate = TRUE,
gp          = gpar(alpha = 0.5)
)
raster <- as.raster(logo)
rg <- rasterGrob(
raster,
width       = unit(1, "npc"),
height      = unit(1, "npc"),
interpolate = TRUE,
gp          = gpar(alpha = 0.5)
)
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, grob=rg)
test.rink <- rink.plot()
test.rink$layers <- c(team.logo, test.rink$layers)
test.rink
rg
team <- "UTH"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
# raster <- as.raster(logo)
logo <- image_ggplot(logo)
logo
logo.grob <- editGrob(ggplotGrob(logo), gp=gpar(alpha=0.15))
logo.size <- 13
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, interpolate = TRUE, grob=logo.grob)
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
raster <- as.raster(logo)
grob <- rasterGrob(raster, width=unit(1, "snpc"), height=unit(1, "snpc"), just="centre", interpolate=TRUE, gp=gpar(alpha=0.15))
# 3) Now annotate without stretch
logo.size <- 13
test.rink <- rink.plot()
test.rink +
annotation_custom(
grob = grob,
xmin = -logo.size, xmax = logo.size,
ymin = -logo.size, ymax = logo.size
)
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
logo <- image_fx(logo, expression = "a*0.15")
# logo.grob <- editGrob(ggplotGrob(logo), gp=gpar(alpha=0.15))
logo.size <- 13
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, interpolate = TRUE, grob=ggplotGrob(logo.grob))
# logo <- image_ggplot(logo)
# logo
raster <- as.raster(logo)
grob <- rasterGrob(raster, width=unit(1, "snpc"), height=unit(1, "snpc"), just="centre", interpolate=TRUE, gp=gpar(alpha=0.15))
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, interpolate = TRUE, grob=grob)
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, grob=grob)
test.rink <- rink.plot()
test.rink$layers <- c(team.logo, test.rink$layers)
test.rink
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/rink.R", echo=TRUE)
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo
logo <- image_read(logo)
logo
logo <- image_fx(logo, expression = "a*0.15")
logo
team <- "UTA"
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
logo <- image_fx(logo, expression = "a*0.15", channel="alpha")
# logo <- image_ggplot(logo)
logo
# logo <- image_ggplot(logo)
# logo
raster <- as.raster(logo)
grob <- rasterGrob(raster, width=unit(1, "snpc"), height=unit(1, "snpc"), just="centre", interpolate=TRUE, gp=gpar(alpha=0.15))
# logo.grob <- editGrob(ggplotGrob(logo), gp=gpar(alpha=0.15))
logo.size <- 13
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, grob=grob)
test.rink <- rink.plot()
test.rink$layers <- c(team.logo, test.rink$layers)
test.rink
rink.logo <- function(team){
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
logo <- image_fx(logo, expression = "a*0.3", channel="alpha")
raster <- as.raster(logo)
grob <- rasterGrob(raster, width=unit(1, "snpc"), height=unit(1, "snpc"), just="centre", interpolate=TRUE)
logo.size <- 13
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, grob=grob)
return(team.logo)
}
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/rink.R", echo=TRUE)
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/blues.note.R", echo=TRUE)
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/rink.R", echo=TRUE)
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/blues.note.R", echo=TRUE)
rink
(# Minimum run
rink()
rink("STL")
rink("UTA")
rink.logo <- function(team){
team.logos <- read.csv("Load/team.logos.csv")
team <- teamName.teamId.triCode(team, team.logos)$triCode
logo <- team.logos[team.logos[,"triCode"]==team,]
if(nrow(logo)>1){
logo <- logo[nrow(logo), ]
}
logo <- rsvg_raw(logo[,"lightLogo"])
logo <- image_read(logo)
logo <- image_fx(logo, expression = "a*0.7", channel="alpha")
raster <- as.raster(logo)
grob <- rasterGrob(raster, width=unit(1, "snpc"), height=unit(1, "snpc"), just="centre", interpolate=TRUE)
logo.size <- 13
team.logo <- annotation_custom(ymin=-logo.size, ymax=logo.size, xmin=-logo.size, xmax=logo.size, grob=grob)
return(team.logo)
}
rink("UTA")
# # if the plots need to be re-saved
rink.plot(TRUE)
file.rename("rink.plot.rds", "Load/rink.plot.rds")
blues.note.plot(TRUE, TRUE)
file.rename("blues.rink.plot.rds", "Load/blues.rink.plot.rds")
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/blues.note.R", echo=TRUE)
blues.note.plot(TRUE, TRUE)
file.rename("blues.rink.plot.rds", "Load/blues.rink.plot.rds")
rink()
rink("UTA")
file.remove("Load/blues.rink.plot 2.rds")
file.remove("Load/rink.csv")
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
blues.unprocessed[curve.rows[2], "x"]
blues.unprocessed <- read.csv("Load/blues.unprocessed.csv")
blues.unprocessed[curve.rows[2], "x"]
blues.unprocessed
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
remove.file("NHL.logos.R")
file.remove("NHL.logos.R")
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
devtools::check()
file.rename("Load/blues.unprocessed", "inst/extdata/rink.plot.rds")
dir.create("inst")
dir.create("inst/extdata")
file.rename("Load/blues.unprocessed", "inst/extdata/rink.plot.rds")
file.rename("Load/blues.unprocessed.csv", "inst/extdata/rink.plot.rds")
file.rename("inst/extdata/rink.plot.rds", "inst/extdata/blues.unprocessed.csv")
file.rename("Load/rink.plot.rds", "inst/extdata/rink.plot.rds")
file.rename("Load/rink.unprocessed.csv", "inst/extdata/rink.unprocessed.csv")
file.rename("Load/team.logos.csv", "inst/extdata/team.logos.csv")
devtools::check()
# dir.create("inst")
# dir.create("inst/extdata")
file.rename("Load/blues.unprocessed.csv", "inst/extdata/blues.unprocessed.csv")
file.rename("Load/rink.plot.rds", "inst/extdata/rink.plot.rds")
file.rename("Load/rink.unprocessed.csv", "inst/extdata/rink.unprocessed.csv")
file.rename("Load/rink.plot.rds", "inst/extdata/rink.plot.rds")
devtools::check()
# dir.create("inst")
# dir.create("inst/extdata")
file.rename("Load/blues.unprocessed.csv", "inst/extdata/blues.unprocessed.csv")
file.rename("Load/rink.unprocessed.csv", "inst/extdata/rink.unprocessed.csv")
# dir.create("inst")
# dir.create("inst/extdata")
file.rename("Load/blues.unprocessed.csv", "inst/extdata/blues.unprocessed.csv")
file.rename("Load/rink.plot.rds", "inst/extdata/rink.plot.rds")
file.rename("Load/rink.unprocessed.csv", "inst/extdata/rink.unprocessed.csv")
file.rename("Load/team.logos.csv", "inst/extdata/team.logos.csv")
# # # if the plots need to be re-saved
# rink.plot(TRUE)
# file.rename("rink.plot.rds", "inst/extdata/rink.plot.rds")
blues.note.plot(TRUE, TRUE)
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/blues.note.R", echo=TRUE)
source("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/NHL-SLAP/NHL.Rink/R/rink.R", echo=TRUE)
# # # if the plots need to be re-saved
# rink.plot(TRUE)
# file.rename("rink.plot.rds", "inst/extdata/rink.plot.rds")
blues.note.plot(TRUE, TRUE)
# # # if the plots need to be re-saved
# rink.plot(TRUE)
# file.rename("rink.plot.rds", "inst/extdata/rink.plot.rds")
blues.note.plot(TRUE, TRUE)
# dir.create("inst")
# dir.create("inst/extdata")
file.rename("Load/blues.unprocessed.csv", "inst/extdata/blues.unprocessed.csv")
file.rename("Load/blues.rink.plot.rds", "inst/extdata/blues.rink.plot.rds")
file.rename("Load/rink.plot.rds", "inst/extdata/rink.plot.rds")
file.rename("Load/rink.unprocessed.csv", "inst/extdata/rink.unprocessed.csv")
file.rename("Load/team.logos.csv", "inst/extdata/team.logos.csv")
devtools::check()
devtools::check()
# once all functions are accounted for and properly documented
devtools::document()
# once all functions are accounted for and properly documented
devtools::document()
devtools::check()
devtools::check()
install.packages("C:/Users/Bailey Quinn/iCloudDrive/Desktop/Github/R.packages/bqutils", repos = NULL, type = "source")
devtools::check()
# once all functions are accounted for and properly documented
devtools::document()
devtools::check()
devtools::check()
# once all functions are accounted for and properly documented
devtools::document()
devtools::check()
# once all functions are accounted for and properly documented
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
install.packages("ggplot2")
install.packages("ggplot2")
devtools::document()
devtools::document()
devtools::check()
rink.unprocessed <- utils::read.csv("/inst/extdata/rink.unprocessed.csv")
rink.unprocessed <- utils::read.csv("inst/extdata/rink.unprocessed.csv")
#' @description Generates a frame used to plot an NHL regulation ice rink from simple information.
#'
#' @param save boolean switch referencing a csv save of the intermediate rink.frame.csv (default is FALSE)
#' @param ... optional arguments for internal processing (unused)
#'
#' @return rink.frame
#' @export
#'
#' @examples
#' rink.processing()
rink.processing <- function(save=FALSE, ...){
args <- list(...)
if(!exists("rink.unprocessed")){
# csv.path <- system.file("extdata", "rink.unprocessed.csv", package="NHL.Rink")
# rink.unprocessed <- utils::read.csv(csv.path)
# rink.unprocessed <- utils::read.csv("inst/extdata/rink.unprocessed.csv")
}
rink.y <- 90
rink.x <- (200/85)*90
rink.scale <- 10
rink.unprocessed[,"size"] <- (rink.unprocessed[,"size"] * 25.4)/rink.scale
rink.unprocessed[which(rink.unprocessed[,"geom"]=="segment"), "size"] <- (rink.unprocessed[which(rink.unprocessed[,"geom"]=="segment"), "size"]/0.75)*1
rink.unprocessed[which(rink.unprocessed[,"geom"]=="curve"), "size"] <- (rink.unprocessed[which(rink.unprocessed[,"geom"]=="curve"), "size"]/0.75)*1
endzone.faceoff.segments <- bqutils::subset.object(bqutils::subset.object(rink.unprocessed, "endzone.faceoff", "element"), "segment", "geom")
faceoff.circle <- bqutils::subset.object(bqutils::subset.object(rink.unprocessed, "endzone.faceoff", "element"), "circle", "geom")
faceoff.top.line.x <- 2.875
theta <- acos(((faceoff.circle[1,"r"]^2)+(faceoff.circle[1,"r"]^2)-(2.875^2))/(2*(faceoff.circle[1,"r"]^2)))
faceoff.top.line.y <- faceoff.circle[1,"r"]*cos(theta)
endzone.faceoff.segments[which(endzone.faceoff.segments[,"x"]==0), c("x", "xend", "y", "yend")] <- c(2.875, 2.875, faceoff.top.line.y, (faceoff.top.line.y+2))
dir <- c("x", "y")
for(a in 1:length(dir)){
endzone.faceoff.segments.inverse.dir <- endzone.faceoff.segments
endzone.faceoff.segments.inverse.dir[, c(dir[a], paste0(dir[a], "end"))] <- endzone.faceoff.segments.inverse.dir[, c(dir[a], paste0(dir[a], "end"))]*-1
endzone.faceoff.segments <- rbind(endzone.faceoff.segments, endzone.faceoff.segments.inverse.dir)
}
dir <- c("x", "y")
for(a in 1:length(dir)){
endzone.faceoff.segments[, c(dir[a], paste0(dir[a], "end"))] <- endzone.faceoff.segments[, c(dir[a], paste0(dir[a], "end"))] + faceoff.circle[1, dir[a]]
}
rink.unprocessed <- rbind(bqutils::subset.object(rink.unprocessed, "endzone.faceoff", "element", remove=TRUE), faceoff.circle, endzone.faceoff.segments)
dir <- c("x", "y")
for(a in 1:length(dir)){
rink.unprocessed.inverse.dir <- rink.unprocessed[rink.unprocessed[, paste0("inverse.", dir[a])],]
rink.unprocessed.inverse.dir[, c(dir[a], paste0(dir[a], "end"), "curvature")] <- rink.unprocessed.inverse.dir[, c(dir[a], paste0(dir[a], "end"), "curvature")]*(-1)
rink.unprocessed <- rbind(rink.unprocessed, rink.unprocessed.inverse.dir)
}
rink.frame <- rink.unprocessed
if(save){
utils::write.csv(rink.frame, "./rink.csv")
}
return(rink.frame)
}
rink.frame <- rink.processing()
transparancy <- 1
rink.y <- 90
rink.x <- (200/85)*90
rink.scale <- 10
rink.plot <- ggplot2::ggplot() +
ggplot2::theme_void() +
ggplot2::scale_size_identity() +
ggplot2::scale_color_identity() +
ggplot2::scale_fill_identity() +
ggplot2::scale_x_continuous(limits=c(-(rink.x/2), (rink.x/2)), breaks=seq(-100, 100, by=25), expand=ggplot2::expansion(mult=c(0.01, 0.01))) +
ggplot2::scale_y_continuous(limits=c(-(rink.y/2), (rink.y/2)), breaks=seq(-42.5, 42.5, by=25), expand=ggplot2::expansion(mult=c(0.01, 0.01)))
layers <- bqutils::uuln(rink.frame[,"layer"]) %>%
.[order(.)]
for(b in 1:length(layers)){
if(layers[b]==4){
transparancy <- 1
}
rink.frame.layer <- bqutils::subset.object(rink.frame, layers[b], "layer")
rink.frame.layer.curve <- bqutils::subset.object(rink.frame.layer, "curve", "geom")
if(nrow(rink.frame.layer.curve)>0){
for(a in 1:nrow(rink.frame.layer.curve)){
rink.plot <- rink.plot +
ggplot2::geom_curve(data=rink.frame.layer.curve[a,], alpha=transparancy, inherit.aes=FALSE, curvature=rink.frame.layer.curve[a, "curvature"],
ggplot2::aes(x=x, xend=xend, y=y, yend=yend, size=size, color=color))
}
}
# alpha("#1F77B4", 0.5)
rink.plot <- rink.plot +
ggforce::geom_circle(data=bqutils::subset.object(rink.frame.layer, "circle", "geom"), alpha=transparancy, inherit.aes=FALSE,
ggplot2::aes(x0=x, y0=y, r=r, size=size, color=color, fill=fill))
rink.plot <- rink.plot +
ggplot2::geom_segment(data=bqutils::subset.object(rink.frame.layer, "segment", "geom"), alpha=transparancy, inherit.aes=FALSE,
ggplot2::aes(x=x, xend=xend, y=y, yend=yend, size=size, color=color))
}
rink.plot <- rink.plot + ggplot2::theme(plot.background=ggplot2::element_rect(color="white", fill="white"))
rink.plot
devtools::document()
devtools::document()
devtools::check()
devtools::check()
package.install("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::document()
devtools::check()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(ggplot2)
install.packages(c("ggplot2", "rlang"))
install.packages(c("ggplot2", "rlang"))
install.packages(c("ggplot2", "rlang"))
# get all library locations
libs <- .libPaths()
# loop through them
for (lib in libs) {
# find out if rlang is installed here
ip <- installed.packages(lib.loc = lib)[, "Package"]
if ("rlang" %in% ip) {
message("Removing rlang from: ", lib)
remove.packages("rlang", lib = lib)
} else {
message("rlang not found in: ", lib)
}
}
install.packages("rlang")
# once all functions are accounted for and properly documented
devtools::document()
devtools::check()
install.packages("pkgload")
# 2. (If you use devtools, update that too)
install.packages("devtools")
# 3. Restart your R session NOW (Ctrl+Shift+F10 in RStudio)
# 4. Reinstall rlang (if you want to be sure you have the latest)
install.packages("rlang")
install.packages("pkgload")
# 2. (If you use devtools, update that too)
install.packages("devtools")
# 3. Restart your R session NOW (Ctrl+Shift+F10 in RStudio)
# 4. Reinstall rlang (if you want to be sure you have the latest)
install.packages("rlang")
devtools::check()
packageVersion("ggplot2")
"stage" %in% getNamespaceExports("ggplot2")
devtools::check()
devtools::check()
devtools::check()
devtools::document()   # regenerates NAMESPACE
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
